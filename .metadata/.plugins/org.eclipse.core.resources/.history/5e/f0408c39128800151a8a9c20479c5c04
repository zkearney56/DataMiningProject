package main.Tree.copy;

import java.util.*;

import Node.*;

public class DecisionTree {
	
	static Node rootNode;
	
	public DecisionTree(){
		//TODO
	}
	
	public void trainTree(ArrayList<ArrayList> data){
		//Set up the root node to decide based from the first input
		rootNode = new OrdinalDecisionNode((float) data.get(0).get(0));
		rootNode.setRight(new Leaf((String)data.get(0).get(1)));
		
		for(int i = 0; i < data.size(); i++){
			System.out.println(rootNode.acceptData(data.get(i)));
		}
	}
	
	public void classify(Object data){
		
	}
	
	public static void main(String args[]){
		
		DecisionTree myTree = new DecisionTree();
		ArrayList<ArrayList> myList = new ArrayList<>();
		int testSize = 12;
		
		for(int i = 1; i < testSize + 1; i++){
			ArrayList<Object> list = new ArrayList<Object>();
			
			list.add((float)i);
			myList.add(list);
			
			if( i < testSize/2){
				myList.get(i - 1).add("below " + Float.toString(testSize/2));
			}
			if(i == 25){
				myList.get(i - 1).add("equal " + Float.toString(testSize/2));
			}
			else{
				myList.get(i - 1).add("above " + Float.toString(testSize/2));
			}
		}
		Random myRand = new Random();
		for(int j = 0; j < testSize; j++){
			float tempF;
			String tempS;
			int rand = myRand.nextInt(testSize);
			
			tempF = (float) myList.get(rand).get(0);
			tempS = (String) myList.get(rand).get(1);
			
			myList.get(rand).set(0, (float) myList.get(j).get(0));
			myList.get(rand).set(1, (String) myList.get(j).get(1));
			
			myList.get(j).set(0, tempF);
			myList.get(j).set(1, tempS);
		}
	//	for(int i = 0; i < 10; i++){
			
		//	System.out.println(myList.get(i).get(0));
	//	}
		myTree.trainTree(myList);
		myTree.inOrderPrint();
		myTree.print(rootNode);
	}
	public void inOrderPrint(){
		printInOrder(rootNode);
		System.out.println("");
	}
	private void printInOrder(Node n){
		if(n instanceof Leaf){
			System.out.println(n);
			return;
		}
		printInOrder(n.getLeft());
		System.out.println(n);
		printInOrder(n.getRight());
	}

	public static void print(Node root)
    {
        List<List<String>> lines = new ArrayList<List<String>>();

        List<Node> level = new ArrayList<Node>();
        List<Node> next = new ArrayList<Node>();

        level.add(root);
        int nn = 1;

        int widest = 0;

        while (nn != 0) {
            List<String> line = new ArrayList<String>();

            nn = 0;

            for (Node n : level) {
                if (n == null) {
                    line.add(null);

                    next.add(null);
                    next.add(null);
                } else {
                    String aa = n.toString();
                    line.add(aa);
                    if (aa.length() > widest) widest = aa.length();

                    next.add(n.getLeft());
                    next.add(n.getRight());

                    if (n.getLeft() != null) nn++;
                    if (n.getRight() != null) nn++;
                }
            }

            if (widest % 2 == 1) widest++;

            lines.add(line);

            List<Node> tmp = level;
            level = next;
            next = tmp;
            next.clear();
        }

        int perpiece = lines.get(lines.size() - 1).size() * (widest + 4);
        for (int i = 0; i < lines.size(); i++) {
            List<String> line = lines.get(i);
            int hpw = (int) Math.floor(perpiece / 2f) - 1;

            if (i > 0) {
                for (int j = 0; j < line.size(); j++) {

                    // split node
                    char c = ' ';
                    if (j % 2 == 1) {
                        if (line.get(j - 1) != null) {
                            c = (line.get(j) != null) ? 'â”´' : 'â”˜';
                        } else {
                            if (j < line.size() && line.get(j) != null) c = 'â””';
                        }
                    }
                    System.out.print(c);

                    // lines and spaces
                    if (line.get(j) == null) {
                        for (int k = 0; k < perpiece - 1; k++) {
                            System.out.print(" ");
                        }
                    } else {

                        for (int k = 0; k < hpw; k++) {
                            System.out.print(j % 2 == 0 ? " " : "â”€");
                        }
                        System.out.print(j % 2 == 0 ? "â”Œ" : "â”?");
                        for (int k = 0; k < hpw; k++) {
                            System.out.print(j % 2 == 0 ? "â”€" : " ");
                        }
                    }
                }
                System.out.println();
            }

            // print line of numbers
            for (int j = 0; j < line.size(); j++) {

                String f = line.get(j);
                if (f == null) f = "";
                int gap1 = (int) Math.ceil(perpiece / 2f - f.length() / 2f);
                int gap2 = (int) Math.floor(perpiece / 2f - f.length() / 2f);

                // a number
                for (int k = 0; k < gap1; k++) {
                    System.out.print(" ");
                }
                System.out.print(f);
                for (int k = 0; k < gap2; k++) {
                    System.out.print(" ");
                }
            }
            System.out.println();

            perpiece /= 2;
        }
    }
}


